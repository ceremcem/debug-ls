#!/bin/bash
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"


# show help
# -----------------------------------------------
show_help(){
    cat <<HELP
    Creates bundle from a LiveScript file by using Rollup.

    $(basename $0) source-file.ls [options]
    Options:
        --out       : Output file
        --no-map    : Do not include Source Maps
        -f, --force : Overwrite the output file
        -h, --help  : Show help
        -w, --watch : Watch the file and its dependencies, rebuild when necessary

HELP
}

die(){
    echo
    echo "$1"
    echo
    show_help
    exit 1
}

err(){
    echo
    echo "$@"
    echo
    exit 1
}


# Parse command line arguments
# ---------------------------
# Initialize parameters
out="auto"
force=
sourcemaps="--output.sourcemap=inline"
watch=
# ---------------------------
args_backup=("$@")
args=()
_count=1
while :; do
    key="${1:-}"
    case $key in
        -h|-\?|--help)
            show_help    # Display a usage synopsis.
            exit
            ;;
        # --------------------------------------------------------
        --out) shift
            if [[ -n $1 ]]; then
                out="$1"
                shift
            fi
            ;;
        -f|--force) shift
            force=true
            ;;
        --no-map) shift
            sourcemaps=
            ;;
        -w|--watch) shift
            watch="-w"
            ;;
        # --------------------------------------------------------
        -*) # Handle unrecognized options
            echo
            echo "Unknown option: $1"
            echo
            exit 1
            ;;
        *)  # Generate the new positional arguments: $arg1, $arg2, ... and ${args[@]}
            if [[ ! -z ${1:-} ]]; then
                declare arg$((_count++))="$1"
                args+=("$1")
                shift
            fi
    esac
    [[ -z ${1:-} ]] && break
done; set -- "${args_backup[@]}"
# Use $arg1 in place of $1, $arg2 in place of $2 and so on, 
# "$@" is in the original state,
# use ${args[@]} for new positional arguments  

src="${arg1:-}"
[[ -z ${src:-} ]] && die "Source file can not be empty"
[[ "$out" = "auto" ]] && out="${src}.js"


[[ -z "$force" ]] && [[ -f "$out" ]] && err "Output file exists: $out"
cleanup(){
    echo "Cleaning up temporary file ($tmp)"
    rm $out 2> /dev/null
}
trap cleanup INT
rollup $watch -c "$DIR/rollup.config.js" --input "$src" --output.file "$out" $sourcemaps &
while sleep 1; do
    # wait until first output is created
    [[ -f "$out" ]] && break
done
